--- CMakeLists.txt.orig	2024-10-17 00:27:56.332964431 -0700
+++ CMakeLists.txt	2024-10-17 02:00:22.947570931 -0700
@@ -1,5 +1,6 @@
 cmake_minimum_required(VERSION 3.5)
 project(NuRaft VERSION 1.0.0 LANGUAGES CXX)
+set (CMAKE_CXX_STANDARD 11)
 
 # === Build type (default: RelWithDebInfo, O2) ===========
 if (NOT CMAKE_BUILD_TYPE)
@@ -26,41 +27,23 @@
 
 
 # === Find ASIO ===
-if (BOOST_INCLUDE_PATH AND BOOST_LIBRARY_PATH)
+find_package(OpenSSL CONFIG REQUIRED)
+find_package(Boost CONFIG)
+if (Boost_FOUND)
     # If Boost path (both include and library) is given,
     # use Boost's ASIO.
-    message(STATUS "Boost include path: " ${BOOST_INCLUDE_PATH})
-    message(STATUS "Boost library path: " ${BOOST_LIBRARY_PATH})
-
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_BOOST_ASIO")
-
-    set(ASIO_INCLUDE_DIR ${BOOST_INCLUDE_PATH})
-    set(LIBBOOST_SYSTEM "${BOOST_LIBRARY_PATH}/libboost_system.a")
-
+    set(ASIO_DEP boost::boost)
 else ()
     # If not, ASIO standalone mode.
-    FIND_PATH(ASIO_INCLUDE_DIR
-              NAME asio.hpp
-              HINTS ${PROJECT_SOURCE_DIR}/asio/asio/include
-                    $ENV{HOME}/local/include
-                    /opt/local/include
-                    /usr/local/include
-                    /usr/include)
-
+    find_package(Asio CONFIG REQUIRED)
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DASIO_STANDALONE")
-
-endif ()
-
-if (NOT ASIO_INCLUDE_DIR)
-    message(FATAL_ERROR "Can't find ASIO header files")
-else ()
-    message(STATUS "ASIO include path: " ${ASIO_INCLUDE_DIR})
+    set(ASIO_DEP asio::asio)
 endif ()
 
 
 # === Includes ===
 include_directories(BEFORE ./)
-include_directories(BEFORE ${ASIO_INCLUDE_DIR})
 include_directories(BEFORE ${PROJECT_SOURCE_DIR}/include)
 include_directories(BEFORE ${PROJECT_SOURCE_DIR}/include/libnuraft)
 include_directories(BEFORE ${PROJECT_SOURCE_DIR}/examples)
@@ -83,19 +66,7 @@
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-pessimizing-move")
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-deprecated-declarations")
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
-    if (APPLE)
-#        include_directories(BEFORE
-#                /usr/local/opt/openssl/include
-#                )
-#        link_directories(
-#                /usr/local/opt/openssl/lib
-#                )
-    else()
-        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
-    endif ()
     if (USE_PTHREAD_EXIT)
         message(STATUS "Using ::pthread_exit for termination")
         set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_PTHREAD_EXIT")
@@ -273,78 +244,18 @@
     ${ROOT_SRC}/stat_mgr.cxx
     )
 add_library(RAFT_CORE_OBJ OBJECT ${RAFT_CORE})
+target_link_libraries(RAFT_CORE_OBJ ${ASIO_DEP} openssl::openssl)
 
 set(STATIC_LIB_SRC
     $<TARGET_OBJECTS:RAFT_CORE_OBJ>)
 
 # === Executables ===
 set(LIBRARY_NAME "nuraft")
-
-add_library(static_lib ${STATIC_LIB_SRC})
-add_library(NuRaft::static_lib ALIAS static_lib)
-set_target_properties(static_lib PROPERTIES OUTPUT_NAME ${LIBRARY_NAME} CLEAN_DIRECT_OUTPUT 1)
-
-add_library(shared_lib SHARED ${STATIC_LIB_SRC})
-add_library(NuRaft::shared_lib ALIAS shared_lib)
-set_target_properties(shared_lib PROPERTIES OUTPUT_NAME ${LIBRARY_NAME} CLEAN_DIRECT_OUTPUT 1)
-
-# Include directories are necessary for dependents to use the targets.
-target_include_directories(static_lib
-    PUBLIC
-        $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
-        $<INSTALL_INTERFACE:${CMAKE_INSTALL_PREFIX}/include>
-)
-
-target_include_directories(static_lib
-    PUBLIC
-        $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
-        $<INSTALL_INTERFACE:${CMAKE_INSTALL_PREFIX}/include>
-)
-
-if (APPLE)
-    target_link_libraries(shared_lib ${LIBRARIES})
-endif ()
-
-if (WIN32)
-    set(LIBRARY_OUTPUT_NAME "${LIBRARY_NAME}.lib")
-else ()
-    set(LIBRARY_OUTPUT_NAME "lib${LIBRARY_NAME}.a")
-endif ()
-message(STATUS "Output library file name: ${LIBRARY_OUTPUT_NAME}")
-
-# === Examples ===
-add_subdirectory("${PROJECT_SOURCE_DIR}/examples")
-
-
-# === Tests ===
-add_subdirectory("${PROJECT_SOURCE_DIR}/tests")
-
-
-if (CODE_COVERAGE GREATER 0)
-    set(CODE_COVERAGE_DEPS
-        raft_server_test
-        failure_test
-        asio_service_test
-        buffer_test
-        serialization_test
-        timer_test
-        strfmt_test
-        stat_mgr_test
-        logger_test
-        new_joiner_test
-    )
-
-    # lcov
-    SETUP_TARGET_FOR_COVERAGE(
-        NAME raft_cov
-        EXECUTABLE ./runtests.sh
-        DEPENDENCIES ${CODE_COVERAGE_DEPS}
-    )
-endif()
-
+add_library(nuraft ${STATIC_LIB_SRC})
+target_link_libraries(nuraft ${ASIO_DEP} openssl::openssl)
 
 # === Install Targets ===
-install(TARGETS shared_lib static_lib
+install(TARGETS nuraft
     EXPORT nuraft-targets
     LIBRARY DESTINATION lib
     ARCHIVE DESTINATION lib
